<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2013-05-24 10:26:22">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<collisions/>
<commit_date/>
<deleted/>
<description/>
<inserted/>
<name>Barcode Generator</name>
<origin_sys_id/>
<release_date/>
<remote_sys_id>9a1c8f99acedc900064bc482ee4d08a2</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2013-05-24 10:26:22</sys_created_on>
<sys_id>74ecc3d9acedc900064bc482ee4d08f8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2013-05-24 10:26:22</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value=""/>
<category/>
<comments/>
<name>sys_ui_script_e25ae52057100100824e3ea2fa99fdc8</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script"><sys_ui_script action="INSERT_OR_UPDATE"><active>true</active><description/><global>false</global><name>prototype-barcode</name><script>/*!&#13;
 *  BarCode Coder Library (BCC Library)&#13;
 *  BCCL Version 2.0&#13;
 *    &#13;
 *  Porting : Prototype barcode plugin &#13;
 *  Version : 2.0.3&#13;
 *   &#13;
 *  Date    : 2013-01-06&#13;
 *  Author  : DEMONTE Jean-Baptiste &lt;jbdemonte@gmail.com&gt;&#13;
 *            HOUREZ Jonathan&#13;
 * &#13;
 *  Web site: http://barcode-coder.com/&#13;
 *  dual licence :  http://www.cecill.info/licences/Licence_CeCILL_V2-fr.html&#13;
 *                  http://www.gnu.org/licenses/gpl.html&#13;
 */&#13;
&#13;
var Barcode = {&#13;
  settings:{&#13;
    barWidth: 1,&#13;
    barHeight: 50,&#13;
    moduleSize: 5,&#13;
    showHRI: true,&#13;
    addQuietZone: true,&#13;
    marginHRI: 5,&#13;
    bgColor: "#FFFFFF",&#13;
    color: "#000000",&#13;
    fontSize: 10,&#13;
    output: "css",&#13;
    posX: 0,&#13;
    posY: 0&#13;
  },&#13;
  intval: function(val){&#13;
    var type = typeof( val );&#13;
    if (type == 'string'){&#13;
      val = val.replace(/[^0-9-.]/g, "");&#13;
      val = parseInt(val * 1, 10);&#13;
      return isNaN(val) || !isFinite(val) ? 0 : val;&#13;
    }&#13;
    return type == 'number' &amp;&amp; isFinite(val) ? Math.floor(val) : 0;&#13;
  },&#13;
  i25: { // std25 int25&#13;
    encoding: ["NNWWN", "WNNNW", "NWNNW", "WWNNN", "NNWNW", "WNWNN", "NWWNN", "NNNWW", "WNNWN","NWNWN"],&#13;
    compute: function(code, crc, type){&#13;
      if (! crc) {&#13;
        if (code.length % 2 != 0) code = '0' + code;&#13;
      } else {&#13;
        if ( (type == "int25") &amp;&amp; (code.length % 2 == 0) ) code = '0' + code;&#13;
        var odd = true, v, sum = 0;&#13;
        for(var i=code.length-1; i&gt;-1; i--){&#13;
          v = Barcode.intval(code.charAt(i));&#13;
          if (isNaN(v)) return("");&#13;
          sum += odd ? 3 * v : v;&#13;
          odd = ! odd;&#13;
        }&#13;
        code += ((10 - sum % 10) % 10).toString();&#13;
      }&#13;
      return(code);&#13;
    },&#13;
    getDigit: function(code, crc, type){&#13;
      code = this.compute(code, crc, type);&#13;
      if (code == "") return("");&#13;
      result = "";&#13;
      &#13;
      var i, j;&#13;
      if (type == "int25") {&#13;
        // Interleaved 2 of 5&#13;
        &#13;
        // start&#13;
        result += "1010";&#13;
        &#13;
        // digits + CRC&#13;
        var c1, c2;&#13;
        for(i=0; i&lt;code.length / 2; i++){&#13;
          c1 = code.charAt(2*i);&#13;
          c2 = code.charAt(2*i+1);&#13;
          for(j=0; j&lt;5; j++){&#13;
            result += '1';&#13;
            if (this.encoding[c1].charAt(j) == 'W') result += '1';&#13;
            result += '0';&#13;
            if (this.encoding[c2].charAt(j) == 'W') result += '0';&#13;
          }&#13;
        }&#13;
        // stop&#13;
        result += "1101";&#13;
      } else if (type == "std25") {&#13;
        // Standard 2 of 5 is a numeric-only barcode that has been in use a long time. &#13;
        // Unlike Interleaved 2 of 5, all of the information is encoded in the bars; the spaces are fixed width and are used only to separate the bars.&#13;
        // The code is self-checking and does not include a checksum.&#13;
        &#13;
        // start&#13;
        result += "11011010";&#13;
        &#13;
        // digits + CRC&#13;
        var c;&#13;
        for(i=0; i&lt;code.length; i++){&#13;
          c = code.charAt(i);&#13;
          for(j=0; j&lt;5; j++){&#13;
            result += '1';&#13;
            if (this.encoding[c].charAt(j) == 'W') result += "11";&#13;
            result += '0';&#13;
          }&#13;
        }&#13;
        // stop&#13;
        result += "11010110";&#13;
      }&#13;
      return(result);&#13;
    }&#13;
  },&#13;
  ean: {&#13;
    encoding: [ ["0001101", "0100111", "1110010"],&#13;
                ["0011001", "0110011", "1100110"], &#13;
                ["0010011", "0011011", "1101100"],&#13;
                ["0111101", "0100001", "1000010"], &#13;
                ["0100011", "0011101", "1011100"], &#13;
                ["0110001", "0111001", "1001110"],&#13;
                ["0101111", "0000101", "1010000"],&#13;
                ["0111011", "0010001", "1000100"],&#13;
                ["0110111", "0001001", "1001000"],&#13;
                ["0001011", "0010111", "1110100"] ],&#13;
    first:  ["000000","001011","001101","001110","010011","011001","011100","010101","010110","011010"],&#13;
    getDigit: function(code, type){&#13;
      // Check len (12 for ean13, 7 for ean8)&#13;
      var len = type == "ean8" ? 7 : 12;&#13;
      code = code.substring(0, len);&#13;
      if (code.length != len) return("");&#13;
      // Check each digit is numeric&#13;
      var c;&#13;
      for(var i=0; i&lt;code.length; i++){&#13;
        c = code.charAt(i);&#13;
        if ( (c &lt; '0') || (c &gt; '9') ) return("");&#13;
      }&#13;
      // get checksum&#13;
      code = this.compute(code, type);&#13;
      &#13;
      // process analyse&#13;
      var result = "101"; // start&#13;
      &#13;
      if (type == "ean8"){&#13;
&#13;
        // process left part&#13;
        for(var i=0; i&lt;4; i++){&#13;
          result += this.encoding[Barcode.intval(code.charAt(i))][0];&#13;
        }&#13;
            &#13;
        // center guard bars&#13;
        result += "01010";&#13;
            &#13;
        // process right part&#13;
        for(var i=4; i&lt;8; i++){&#13;
          result += this.encoding[Barcode.intval(code.charAt(i))][2];&#13;
        }&#13;
            &#13;
      } else { // ean13&#13;
        // extract first digit and get sequence&#13;
        var seq = this.first[ Barcode.intval(code.charAt(0)) ];&#13;
        &#13;
        // process left part&#13;
        for(var i=1; i&lt;7; i++){&#13;
          result += this.encoding[Barcode.intval(code.charAt(i))][ Barcode.intval(seq.charAt(i-1)) ];&#13;
        }&#13;
        &#13;
        // center guard bars&#13;
        result += "01010";&#13;
            &#13;
        // process right part&#13;
        for(var i=7; i&lt;13; i++){&#13;
          result += this.encoding[Barcode.intval(code.charAt(i))][ 2 ];&#13;
        }&#13;
      } // ean13&#13;
      &#13;
      result += "101"; // stop&#13;
      return(result);&#13;
    },&#13;
    compute: function (code, type){&#13;
      var len = type == "ean13" ? 12 : 7;&#13;
      code = code.substring(0, len);&#13;
      var sum = 0, odd = true;&#13;
      for(i=code.length-1; i&gt;-1; i--){&#13;
        sum += (odd ? 3 : 1) * Barcode.intval(code.charAt(i));&#13;
        odd = ! odd;&#13;
      }&#13;
      return(code + ((10 - sum % 10) % 10).toString());&#13;
    }&#13;
  },&#13;
  upc: {&#13;
    getDigit: function(code){&#13;
      if (code.length &lt; 12) {&#13;
        code = '0' + code;&#13;
      }&#13;
      return Barcode.ean.getDigit(code, 'ean13');&#13;
    },&#13;
    compute: function (code){&#13;
      if (code.length &lt; 12) {&#13;
        code = '0' + code;&#13;
      }&#13;
      return Barcode.ean.compute(code, 'ean13').substr(1);&#13;
    }&#13;
  },&#13;
  msi: {&#13;
    encoding:["100100100100", "100100100110", "100100110100", "100100110110",&#13;
              "100110100100", "100110100110", "100110110100", "100110110110",&#13;
              "110100100100", "110100100110"],&#13;
    compute: function(code, crc){&#13;
      if (typeof(crc) == "object"){&#13;
        if (crc.crc1 == "mod10"){&#13;
          code = this.computeMod10(code);&#13;
        } else if (crc.crc1 == "mod11"){&#13;
          code = this.computeMod11(code);&#13;
        }&#13;
        if (crc.crc2 == "mod10"){&#13;
          code = this.computeMod10(code);&#13;
        } else if (crc.crc2 == "mod11"){&#13;
          code = this.computeMod11(code);&#13;
        }&#13;
      } else if (typeof(crc) == "boolean"){&#13;
        if (crc) code = this.computeMod10(code);&#13;
      }&#13;
      return(code);&#13;
    },&#13;
    computeMod10:function(code){&#13;
      var i, &#13;
      toPart1 = code.length % 2;&#13;
      var n1 = 0, sum = 0;&#13;
      for(i=0; i&lt;code.length; i++){&#13;
        if (toPart1) {&#13;
          n1 = 10 * n1 + Barcode.intval(code.charAt(i));&#13;
        } else {&#13;
          sum += Barcode.intval(code.charAt(i));&#13;
        }&#13;
        toPart1 = ! toPart1;&#13;
      }&#13;
      var s1 = (2 * n1).toString();&#13;
      for(i=0; i&lt;s1.length; i++){&#13;
        sum += Barcode.intval(s1.charAt(i));&#13;
      }&#13;
      return(code + ((10 - sum % 10) % 10).toString());&#13;
    },&#13;
    computeMod11:function(code){&#13;
      var sum = 0, weight = 2;&#13;
      for(var i=code.length-1; i&gt;=0; i--){&#13;
        sum += weight * Barcode.intval(code.charAt(i));&#13;
        weight = weight == 7 ? 2 : weight + 1;&#13;
      }&#13;
      return(code + ((11 - sum % 11) % 11).toString());&#13;
    },&#13;
    getDigit: function(code, crc){&#13;
      var table = "0123456789";&#13;
      var index = 0;&#13;
      var result = "";&#13;
      &#13;
      code = this.compute(code, false);&#13;
      &#13;
      // start&#13;
      result = "110";&#13;
      &#13;
      // digits&#13;
      for(i=0; i&lt;code.length; i++){&#13;
        index = table.indexOf( code.charAt(i) );&#13;
        if (index &lt; 0) return("");&#13;
        result += this.encoding[ index ];&#13;
      }&#13;
      &#13;
      // stop&#13;
      result += "1001";&#13;
      &#13;
      return(result);&#13;
    }&#13;
  },&#13;
  code11: {&#13;
    encoding:[  "101011", "1101011", "1001011", "1100101",&#13;
                "1011011", "1101101", "1001101", "1010011",&#13;
                "1101001", "110101", "101101"],&#13;
    getDigit: function(code){&#13;
      var table = "0123456789-";&#13;
      var i, index, result = "", intercharacter = '0'&#13;
      &#13;
      // start&#13;
      result = "1011001" + intercharacter;&#13;
      &#13;
      // digits&#13;
      for(i=0; i&lt;code.length; i++){&#13;
        index = table.indexOf( code.charAt(i) );&#13;
        if (index &lt; 0) return("");&#13;
        result += this.encoding[ index ] + intercharacter;&#13;
      }&#13;
      &#13;
      // checksum&#13;
      var weightC    = 0,&#13;
      weightSumC = 0,&#13;
      weightK    = 1, // start at 1 because the right-most character is "C" checksum&#13;
      weightSumK   = 0;&#13;
      for(i=code.length-1; i&gt;=0; i--){&#13;
        weightC = weightC == 10 ? 1 : weightC + 1;&#13;
        weightK = weightK == 10 ? 1 : weightK + 1;&#13;
        &#13;
        index = table.indexOf( code.charAt(i) );&#13;
        &#13;
        weightSumC += weightC * index;&#13;
        weightSumK += weightK * index;&#13;
      }&#13;
      &#13;
      var c = weightSumC % 11;&#13;
      weightSumK += c;&#13;
      var k = weightSumK % 11;&#13;
      &#13;
      result += this.encoding[c] + intercharacter;&#13;
      &#13;
      if (code.length &gt;= 10){&#13;
        result += this.encoding[k] + intercharacter;&#13;
      }&#13;
      &#13;
      // stop&#13;
      result  += "1011001";&#13;
      &#13;
      return(result);&#13;
    }   &#13;
  },&#13;
  code39: {&#13;
    encoding:["101001101101", "110100101011", "101100101011", "110110010101",&#13;
              "101001101011", "110100110101", "101100110101", "101001011011",&#13;
              "110100101101", "101100101101", "110101001011", "101101001011",&#13;
              "110110100101", "101011001011", "110101100101", "101101100101",&#13;
              "101010011011", "110101001101", "101101001101", "101011001101",&#13;
              "110101010011", "101101010011", "110110101001", "101011010011",&#13;
              "110101101001", "101101101001", "101010110011", "110101011001",&#13;
              "101101011001", "101011011001", "110010101011", "100110101011",&#13;
              "110011010101", "100101101011", "110010110101", "100110110101",&#13;
              "100101011011", "110010101101", "100110101101", "100100100101",&#13;
              "100100101001", "100101001001", "101001001001", "100101101101"],&#13;
    getDigit: function(code){&#13;
      var table = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%*";&#13;
      var i, index, result="", intercharacter='0';&#13;
      &#13;
      if (code.indexOf('*') &gt;= 0) return("");&#13;
      &#13;
      // Add Start and Stop charactere : *&#13;
      code = ("*" + code + "*").toUpperCase();&#13;
      &#13;
      for(i=0; i&lt;code.length; i++){&#13;
        index = table.indexOf( code.charAt(i) );&#13;
        if (index &lt; 0) return("");&#13;
        if (i &gt; 0) result += intercharacter;&#13;
        result += this.encoding[ index ];&#13;
      }&#13;
      return(result);&#13;
    }&#13;
  },&#13;
  code93:{&#13;
    encoding:["100010100", "101001000", "101000100", "101000010",&#13;
              "100101000", "100100100", "100100010", "101010000",&#13;
              "100010010", "100001010", "110101000", "110100100",&#13;
              "110100010", "110010100", "110010010", "110001010",&#13;
              "101101000", "101100100", "101100010", "100110100",&#13;
              "100011010", "101011000", "101001100", "101000110",&#13;
              "100101100", "100010110", "110110100", "110110010",&#13;
              "110101100", "110100110", "110010110", "110011010",&#13;
              "101101100", "101100110", "100110110", "100111010",&#13;
              "100101110", "111010100", "111010010", "111001010",&#13;
              "101101110", "101110110", "110101110", "100100110",&#13;
              "111011010", "111010110", "100110010", "101011110"],&#13;
    getDigit: function(code, crc){&#13;
      var table = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%____*", // _ =&gt; ($), (%), (/) et (+)&#13;
      c, result = "";&#13;
      &#13;
      if (code.indexOf('*') &gt;= 0) return("");&#13;
      &#13;
      code = code.toUpperCase();&#13;
      &#13;
      // start :  *&#13;
      result  += this.encoding[47];&#13;
      &#13;
      // digits&#13;
      for(i=0; i&lt;code.length; i++){&#13;
        c = code.charAt(i);&#13;
        index = table.indexOf( c );&#13;
        if ( (c == '_') || (index &lt; 0) ) return("");&#13;
        result += this.encoding[ index ];&#13;
      }&#13;
      &#13;
      // checksum&#13;
      if (crc){&#13;
        var weightC    = 0,&#13;
        weightSumC = 0,&#13;
        weightK    = 1, // start at 1 because the right-most character is "C" checksum&#13;
        weightSumK   = 0;&#13;
        for(i=code.length-1; i&gt;=0; i--){&#13;
          weightC = weightC == 20 ? 1 : weightC + 1;&#13;
          weightK = weightK == 15 ? 1 : weightK + 1;&#13;
          &#13;
          index = table.indexOf( code.charAt(i) );&#13;
          &#13;
          weightSumC += weightC * index;&#13;
          weightSumK += weightK * index;&#13;
        }&#13;
        &#13;
        var c = weightSumC % 47;&#13;
        weightSumK += c;&#13;
        var k = weightSumK % 47;&#13;
        &#13;
        result += this.encoding[c];&#13;
        result += this.encoding[k];&#13;
      }&#13;
      &#13;
      // stop : *&#13;
      result  += this.encoding[47];&#13;
      &#13;
      // Terminaison bar&#13;
      result  += '1';&#13;
      return(result);&#13;
    }&#13;
  },&#13;
  code128: {&#13;
    encoding:["11011001100", "11001101100", "11001100110", "10010011000",&#13;
              "10010001100", "10001001100", "10011001000", "10011000100",&#13;
              "10001100100", "11001001000", "11001000100", "11000100100",&#13;
              "10110011100", "10011011100", "10011001110", "10111001100",&#13;
              "10011101100", "10011100110", "11001110010", "11001011100",&#13;
              "11001001110", "11011100100", "11001110100", "11101101110",&#13;
              "11101001100", "11100101100", "11100100110", "11101100100",&#13;
              "11100110100", "11100110010", "11011011000", "11011000110",&#13;
              "11000110110", "10100011000", "10001011000", "10001000110",&#13;
              "10110001000", "10001101000", "10001100010", "11010001000",&#13;
              "11000101000", "11000100010", "10110111000", "10110001110",&#13;
              "10001101110", "10111011000", "10111000110", "10001110110",&#13;
              "11101110110", "11010001110", "11000101110", "11011101000",&#13;
              "11011100010", "11011101110", "11101011000", "11101000110",&#13;
              "11100010110", "11101101000", "11101100010", "11100011010",&#13;
              "11101111010", "11001000010", "11110001010", "10100110000",&#13;
              "10100001100", "10010110000", "10010000110", "10000101100",&#13;
              "10000100110", "10110010000", "10110000100", "10011010000",&#13;
              "10011000010", "10000110100", "10000110010", "11000010010",&#13;
              "11001010000", "11110111010", "11000010100", "10001111010",&#13;
              "10100111100", "10010111100", "10010011110", "10111100100",&#13;
              "10011110100", "10011110010", "11110100100", "11110010100",&#13;
              "11110010010", "11011011110", "11011110110", "11110110110",&#13;
              "10101111000", "10100011110", "10001011110", "10111101000",&#13;
              "10111100010", "11110101000", "11110100010", "10111011110",&#13;
              "10111101110", "11101011110", "11110101110", "11010000100",&#13;
              "11010010000", "11010011100", "11000111010"],&#13;
    getDigit: function(code){&#13;
      var tableB = " !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";&#13;
      var result = "";&#13;
      var sum = 0;&#13;
      var isum = 0;&#13;
      var i = 0;&#13;
      var j = 0;&#13;
      var value = 0;&#13;
      &#13;
      // check each characters&#13;
      for(i=0; i&lt;code.length; i++){&#13;
        if (tableB.indexOf(code.charAt(i)) == -1) return("");&#13;
      }&#13;
      &#13;
      // check firsts characters : start with C table only if enought numeric&#13;
      var tableCActivated = code.length &gt; 1;&#13;
      var c = '';&#13;
      for(i=0; i&lt;3 &amp;&amp; i&lt;code.length; i++){&#13;
      c = code.charAt(i);&#13;
        tableCActivated &amp;= c &gt;= '0' &amp;&amp; c &lt;= '9';&#13;
      }&#13;
      &#13;
      sum = tableCActivated ? 105 : 104;&#13;
      &#13;
      // start : [105] : C table or [104] : B table &#13;
      result = this.encoding[ sum ];&#13;
      &#13;
      i = 0;&#13;
      while( i &lt; code.length ){&#13;
        if (! tableCActivated){&#13;
          j = 0;&#13;
          // check next character to activate C table if interresting&#13;
          while ( (i + j &lt; code.length) &amp;&amp; (code.charAt(i+j) &gt;= '0') &amp;&amp; (code.charAt(i+j) &lt;= '9') ) j++;&#13;
          &#13;
          // 6 min everywhere or 4 mini at the end&#13;
          tableCActivated = (j &gt; 5) || ((i + j - 1 == code.length) &amp;&amp; (j &gt; 3));&#13;
          &#13;
          if ( tableCActivated ){&#13;
          result += this.encoding[ 99 ]; // C table&#13;
          sum += ++isum * 99;&#13;
          }&#13;
          //         2 min for table C so need table B&#13;
        } else if ( (i == code.length) || (code.charAt(i) &lt; '0') || (code.charAt(i) &gt; '9') || (code.charAt(i+1) &lt; '0') || (code.charAt(i+1) &gt; '9') ) {&#13;
          tableCActivated = false;&#13;
          result += this.encoding[ 100 ]; // B table&#13;
          sum += ++isum * 100;&#13;
        }&#13;
        &#13;
        if ( tableCActivated ) {&#13;
          value = Barcode.intval(code.charAt(i) + code.charAt(i+1)); // Add two characters (numeric)&#13;
          i += 2;&#13;
        } else {&#13;
          value = tableB.indexOf( code.charAt(i) ); // Add one character&#13;
          i += 1;&#13;
        }&#13;
        result  += this.encoding[ value ];&#13;
        sum += ++isum * value;&#13;
      }&#13;
      &#13;
      // Add CRC&#13;
      result  += this.encoding[ sum % 103 ];&#13;
      &#13;
      // Stop&#13;
      result += this.encoding[106];&#13;
      &#13;
      // Termination bar&#13;
      result += "11";&#13;
      &#13;
      return(result);&#13;
    }&#13;
  },&#13;
  codabar: {&#13;
    encoding:["101010011", "101011001", "101001011", "110010101",&#13;
              "101101001", "110101001", "100101011", "100101101",&#13;
              "100110101", "110100101", "101001101", "101100101",&#13;
              "1101011011", "1101101011", "1101101101", "1011011011",&#13;
              "1011001001", "1010010011", "1001001011", "1010011001"],&#13;
    getDigit: function(code){&#13;
      var table = "0123456789-$:/.+";&#13;
      var i, index, result="", intercharacter = '0';&#13;
      &#13;
      // add start : A-&gt;D : arbitrary choose A&#13;
      result += this.encoding[16] + intercharacter;&#13;
      &#13;
      for(i=0; i&lt;code.length; i++){&#13;
        index = table.indexOf( code.charAt(i) );&#13;
        if (index &lt; 0) return("");&#13;
        result += this.encoding[ index ] + intercharacter;&#13;
      }&#13;
      &#13;
      // add stop : A-&gt;D : arbitrary choose A&#13;
      result += this.encoding[16];&#13;
      return(result);&#13;
    }&#13;
  },&#13;
  datamatrix: {&#13;
    lengthRows:       [ 10, 12, 14, 16, 18, 20, 22, 24, 26,  // 24 squares et 6 rectangular&#13;
                        32, 36, 40, 44, 48, 52, 64, 72, 80,  88, 96, 104, 120, 132, 144,&#13;
                        8, 8, 12, 12, 16, 16],&#13;
    lengthCols:       [ 10, 12, 14, 16, 18, 20, 22, 24, 26,  // Number of columns for the entire datamatrix&#13;
                        32, 36, 40, 44, 48, 52, 64, 72, 80, 88, 96, 104, 120, 132, 144,&#13;
                        18, 32, 26, 36, 36, 48],&#13;
    dataCWCount:      [ 3, 5, 8, 12,  18,  22,  30,  36,  // Number of data codewords for the datamatrix&#13;
                        44, 62, 86, 114, 144, 174, 204, 280, 368, 456, 576, 696, 816, 1050, &#13;
                        1304, 1558, 5, 10, 16, 22, 32, 49],&#13;
    solomonCWCount:   [ 5, 7, 10, 12, 14, 18, 20, 24, 28, // Number of Reed-Solomon codewords for the datamatrix&#13;
                        36, 42, 48, 56, 68, 84, 112, 144, 192, 224, 272, 336, 408, 496, 620,&#13;
                        7, 11, 14, 18, 24, 28],&#13;
    dataRegionRows:   [ 8, 10, 12, 14, 16, 18, 20, 22, // Number of rows per region&#13;
                        24, 14, 16, 18, 20, 22, 24, 14, 16, 18, 20, 22, 24, 18, 20, 22,&#13;
                        6,  6, 10, 10, 14, 14],&#13;
    dataRegionCols:   [ 8, 10, 12, 14, 16, 18, 20, 22, // Number of columns per region&#13;
                        24, 14, 16, 18, 20, 22, 24, 14, 16, 18, 20, 22, 24, 18, 20, 22,&#13;
                        16, 14, 24, 16, 16, 22],&#13;
    regionRows:       [ 1, 1, 1, 1, 1, 1, 1, 1, // Number of regions per row&#13;
                        1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 6, 6, 6,&#13;
                        1, 1, 1, 1, 1, 1],&#13;
    regionCols:       [ 1, 1, 1, 1, 1, 1, 1, 1, // Number of regions per column&#13;
                        1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 6, 6, 6,&#13;
                        1, 2, 1, 2, 2, 2],&#13;
    interleavedBlocks:[ 1, 1, 1, 1, 1, 1, 1, 1, // Number of blocks&#13;
                        1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 4, 4, 6, 6, 8, 8,&#13;
                        1, 1, 1, 1, 1, 1],&#13;
    logTab:           [ -255, 255, 1, 240, 2, 225, 241, 53, 3,  // Table of log for the Galois field&#13;
                        38, 226, 133, 242, 43, 54, 210, 4, 195, 39, 114, 227, 106, 134, 28, &#13;
                        243, 140, 44, 23, 55, 118, 211, 234, 5, 219, 196, 96, 40, 222, 115, &#13;
                        103, 228, 78, 107, 125, 135, 8, 29, 162, 244, 186, 141, 180, 45, 99, &#13;
                        24, 49, 56, 13, 119, 153, 212, 199, 235, 91, 6, 76, 220, 217, 197, &#13;
                        11, 97, 184, 41, 36, 223, 253, 116, 138, 104, 193, 229, 86, 79, 171, &#13;
                        108, 165, 126, 145, 136, 34, 9, 74, 30, 32, 163, 84, 245, 173, 187, &#13;
                        204, 142, 81, 181, 190, 46, 88, 100, 159, 25, 231, 50, 207, 57, 147, &#13;
                        14, 67, 120, 128, 154, 248, 213, 167, 200, 63, 236, 110, 92, 176, 7, &#13;
                        161, 77, 124, 221, 102, 218, 95, 198, 90, 12, 152, 98, 48, 185, 179, &#13;
                        42, 209, 37, 132, 224, 52, 254, 239, 117, 233, 139, 22, 105, 27, 194, &#13;
                        113, 230, 206, 87, 158, 80, 189, 172, 203, 109, 175, 166, 62, 127, &#13;
                        247, 146, 66, 137, 192, 35, 252, 10, 183, 75, 216, 31, 83, 33, 73, &#13;
                        164, 144, 85, 170, 246, 65, 174, 61, 188, 202, 205, 157, 143, 169, 82, &#13;
                        72, 182, 215, 191, 251, 47, 178, 89, 151, 101, 94, 160, 123, 26, 112, &#13;
                        232, 21, 51, 238, 208, 131, 58, 69, 148, 18, 15, 16, 68, 17, 121, 149, &#13;
                        129, 19, 155, 59, 249, 70, 214, 250, 168, 71, 201, 156, 64, 60, 237, &#13;
                        130, 111, 20, 93, 122, 177, 150],&#13;
    aLogTab:          [ 1, 2, 4, 8, 16, 32, 64, 128, 45, 90, // Table of aLog for the Galois field&#13;
                        180, 69, 138, 57, 114, 228, 229, 231, 227, 235, 251, 219, 155, 27, 54, &#13;
                        108, 216, 157, 23, 46, 92, 184, 93, 186, 89, 178, 73, 146, 9, 18, 36, &#13;
                        72, 144, 13, 26, 52, 104, 208, 141, 55, 110, 220, 149, 7, 14, 28, 56, &#13;
                        112, 224, 237, 247, 195, 171, 123, 246, 193, 175, 115, 230, 225, 239, &#13;
                        243, 203, 187, 91, 182, 65, 130, 41, 82, 164, 101, 202, 185, 95, 190, &#13;
                        81, 162, 105, 210, 137, 63, 126, 252, 213, 135, 35, 70, 140, 53, 106, &#13;
                        212, 133, 39, 78, 156, 21, 42, 84, 168, 125, 250, 217, 159, 19, 38, 76, &#13;
                        152, 29, 58, 116, 232, 253, 215, 131, 43, 86, 172, 117, 234, 249, 223, &#13;
                        147, 11, 22, 44, 88, 176, 77, 154, 25, 50, 100, 200, 189, 87, 174, 113, &#13;
                        226, 233, 255, 211, 139, 59, 118, 236, 245, 199, 163, 107, 214, 129, &#13;
                        47, 94, 188, 85, 170, 121, 242, 201, 191, 83, 166, 97, 194, 169, 127, &#13;
                        254, 209, 143, 51, 102, 204, 181, 71, 142, 49, 98, 196, 165, 103, 206, &#13;
                        177, 79, 158, 17, 34, 68, 136, 61, 122, 244, 197, 167, 99, 198, 161, &#13;
                        111, 222, 145, 15, 30, 60, 120, 240, 205, 183, 67, 134, 33, 66, 132, &#13;
                        37, 74, 148, 5, 10, 20, 40, 80, 160, 109, 218, 153, 31, 62, 124, 248, &#13;
                        221, 151, 3, 6, 12, 24, 48, 96, 192, 173, 119, 238, 241, 207, 179, 75, &#13;
                        150, 1],&#13;
    champGaloisMult: function(a, b){  // MULTIPLICATION IN GALOIS FIELD GF(2^8)&#13;
      if(!a || !b) return 0;&#13;
      return this.aLogTab[(this.logTab[a] + this.logTab[b]) % 255];&#13;
    },&#13;
    champGaloisDoub: function(a, b){  // THE OPERATION a * 2^b IN GALOIS FIELD GF(2^8)&#13;
      if (!a) return 0;&#13;
      if (!b) return a;&#13;
      return this.aLogTab[(this.logTab[a] + b) % 255];&#13;
    },&#13;
    champGaloisSum: function(a, b){ // SUM IN GALOIS FIELD GF(2^8)&#13;
      return a ^ b;&#13;
    },&#13;
    selectIndex: function(dataCodeWordsCount, rectangular){ // CHOOSE THE GOOD INDEX FOR TABLES&#13;
      if ((dataCodeWordsCount&lt;1 || dataCodeWordsCount&gt;1558) &amp;&amp; !rectangular) return -1;&#13;
      if ((dataCodeWordsCount&lt;1 || dataCodeWordsCount&gt;49) &amp;&amp; rectangular)  return -1;&#13;
      &#13;
      var n = 0;&#13;
      if ( rectangular ) n = 24;&#13;
      &#13;
      while (this.dataCWCount[n] &lt; dataCodeWordsCount) n++;&#13;
      return n;&#13;
    },&#13;
    encodeDataCodeWordsASCII: function(text) {&#13;
      var dataCodeWords = new Array();&#13;
      var n = 0, i, c;&#13;
      for (i=0; i&lt;text.length; i++){&#13;
        c = text.charCodeAt(i);&#13;
        if (c &gt; 127) {  &#13;
          dataCodeWords[n] = 235;&#13;
          c = c - 127;&#13;
          n++;&#13;
        } else if ((c&gt;=48 &amp;&amp; c&lt;=57) &amp;&amp; (i+1&lt;text.length) &amp;&amp; (text.charCodeAt(i+1)&gt;=48 &amp;&amp; text.charCodeAt(i+1)&lt;=57)) {&#13;
          c = ((c - 48) * 10) + ((text.charCodeAt(i+1))-48);&#13;
          c += 130;&#13;
          i++;&#13;
        } else c++; &#13;
        dataCodeWords[n] = c;&#13;
        n++;&#13;
      }&#13;
      return dataCodeWords;&#13;
    },&#13;
    addPadCW: function(tab, from, to){    &#13;
      if (from &gt;= to) return ;&#13;
      tab[from] = 129;&#13;
      var r, i;&#13;
      for (i=from+1; i&lt;to; i++){&#13;
        r = ((149 * (i+1)) % 253) + 1;&#13;
        tab[i] = (129 + r) % 254;&#13;
      }&#13;
    },&#13;
    calculSolFactorTable: function(solomonCWCount){ // CALCULATE THE REED SOLOMON FACTORS&#13;
      var g = new Array();&#13;
      var i, j;&#13;
      &#13;
      for (i=0; i&lt;=solomonCWCount; i++) g[i] = 1;&#13;
      &#13;
      for(i = 1; i &lt;= solomonCWCount; i++) {&#13;
        for(j = i - 1; j &gt;= 0; j--) {&#13;
          g[j] = this.champGaloisDoub(g[j], i);  &#13;
          if(j &gt; 0) g[j] = this.champGaloisSum(g[j], g[j-1]);&#13;
        }&#13;
      }&#13;
      return g;&#13;
    },&#13;
    addReedSolomonCW: function(nSolomonCW, coeffTab, nDataCW, dataTab, blocks){ // Add the Reed Solomon codewords&#13;
      var temp = 0;    &#13;
      var errorBlocks = nSolomonCW / blocks;&#13;
      var correctionCW = new Array();&#13;
      &#13;
      var i,j,k;&#13;
      for(k = 0; k &lt; blocks; k++) {      &#13;
        for (i=0; i&lt;errorBlocks; i++) correctionCW[i] = 0;&#13;
        &#13;
        for (i=k; i&lt;nDataCW; i=i+blocks){    &#13;
          temp = this.champGaloisSum(dataTab[i], correctionCW[errorBlocks-1]);&#13;
          for (j=errorBlocks-1; j&gt;=0; j--){     &#13;
            if ( !temp ) {&#13;
              correctionCW[j] = 0;&#13;
            } else { &#13;
              correctionCW[j] = this.champGaloisMult(temp, coeffTab[j]);&#13;
            }&#13;
            if (j&gt;0) correctionCW[j] = this.champGaloisSum(correctionCW[j-1], correctionCW[j]);&#13;
          }&#13;
        }&#13;
        // Renversement des blocs calcules&#13;
        j = nDataCW + k;&#13;
        for (i=errorBlocks-1; i&gt;=0; i--){&#13;
          dataTab[j] = correctionCW[i];&#13;
          j=j+blocks;&#13;
        }&#13;
      }&#13;
      return dataTab;&#13;
    },&#13;
    getBits: function(entier){ // Transform integer to tab of bits&#13;
      var bits = new Array();&#13;
      for (var i=0; i&lt;8; i++){&#13;
        bits[i] = entier &amp; (128 &gt;&gt; i) ? 1 : 0;&#13;
      }&#13;
      return bits;&#13;
    },&#13;
    next: function(etape, totalRows, totalCols, codeWordsBits, datamatrix, assigned){ // Place codewords into the matrix&#13;
      var chr = 0; // Place of the 8st bit from the first character to [4][0]&#13;
      var row = 4;&#13;
      var col = 0;&#13;
      &#13;
      do {&#13;
        // Check for a special case of corner&#13;
        if((row == totalRows) &amp;&amp; (col == 0)){&#13;
          this.patternShapeSpecial1(datamatrix, assigned, codeWordsBits[chr], totalRows, totalCols);  &#13;
          chr++;&#13;
        } else if((etape&lt;3) &amp;&amp; (row == totalRows-2) &amp;&amp; (col == 0) &amp;&amp; (totalCols%4 != 0)){&#13;
          this.patternShapeSpecial2(datamatrix, assigned, codeWordsBits[chr], totalRows, totalCols);&#13;
          chr++;&#13;
        } else if((row == totalRows-2) &amp;&amp; (col == 0) &amp;&amp; (totalCols%8 == 4)){&#13;
          this.patternShapeSpecial3(datamatrix, assigned, codeWordsBits[chr], totalRows, totalCols);&#13;
          chr++;&#13;
        }&#13;
        else if((row == totalRows+4) &amp;&amp; (col == 2) &amp;&amp; (totalCols%8 == 0)){&#13;
          this.patternShapeSpecial4(datamatrix, assigned, codeWordsBits[chr], totalRows, totalCols);&#13;
          chr++;&#13;
        }&#13;
        &#13;
        // Go up and right in the datamatrix&#13;
        do {&#13;
          if((row &lt; totalRows) &amp;&amp; (col &gt;= 0) &amp;&amp; (assigned[row][col]!=1)) {&#13;
            this.patternShapeStandard(datamatrix, assigned, codeWordsBits[chr], row, col, totalRows, totalCols);&#13;
            chr++;&#13;
          }&#13;
          row -= 2;&#13;
          col += 2;      &#13;
        } while ((row &gt;= 0) &amp;&amp; (col &lt; totalCols));&#13;
        row += 1;&#13;
        col += 3;&#13;
        &#13;
        // Go down and left in the datamatrix&#13;
        do {&#13;
          if((row &gt;= 0) &amp;&amp; (col &lt; totalCols) &amp;&amp; (assigned[row][col]!=1)){&#13;
            this.patternShapeStandard(datamatrix, assigned, codeWordsBits[chr], row, col, totalRows, totalCols);&#13;
            chr++;&#13;
          }&#13;
          row += 2;&#13;
          col -= 2;&#13;
        } while ((row &lt; totalRows) &amp;&amp; (col &gt;=0));&#13;
        row += 3;&#13;
        col += 1;&#13;
      } while ((row &lt; totalRows) || (col &lt; totalCols));&#13;
    },&#13;
    patternShapeStandard: function(datamatrix, assigned, bits, row, col, totalRows, totalCols){ // Place bits in the matrix (standard or special case)&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[0], row-2, col-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[1], row-2, col-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[2], row-1, col-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[3], row-1, col-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[4], row-1, col, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[5], row, col-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[6], row, col-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[7], row,  col, totalRows, totalCols);&#13;
    },  &#13;
    patternShapeSpecial1: function(datamatrix, assigned, bits, totalRows, totalCols ){&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[0], totalRows-1,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[1], totalRows-1,  1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[2], totalRows-1,  2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[3], 0, totalCols-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[4], 0, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[5], 1, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[6], 2, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[7], 3, totalCols-1, totalRows, totalCols);&#13;
    },&#13;
    patternShapeSpecial2: function(datamatrix, assigned, bits, totalRows, totalCols ){&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[0], totalRows-3,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[1], totalRows-2,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[2], totalRows-1,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[3], 0, totalCols-4, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[4], 0, totalCols-3, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[5], 0, totalCols-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[6], 0, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[7], 1, totalCols-1, totalRows, totalCols);&#13;
    },  &#13;
    patternShapeSpecial3: function(datamatrix, assigned, bits, totalRows, totalCols ){&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[0], totalRows-3,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[1], totalRows-2,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[2], totalRows-1,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[3], 0, totalCols-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[4], 0, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[5], 1, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[6], 2, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[7], 3, totalCols-1, totalRows, totalCols);&#13;
    },&#13;
    patternShapeSpecial4: function(datamatrix, assigned, bits, totalRows, totalCols ){&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[0], totalRows-1,  0, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[1], totalRows-1, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[2], 0, totalCols-3, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[3], 0, totalCols-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[4], 0, totalCols-1, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[5], 1, totalCols-3, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[6], 1, totalCols-2, totalRows, totalCols);&#13;
      this.placeBitInDatamatrix(datamatrix, assigned, bits[7], 1, totalCols-1, totalRows, totalCols);&#13;
    },&#13;
    placeBitInDatamatrix: function(datamatrix, assigned, bit, row, col, totalRows, totalCols){ // Put a bit into the matrix&#13;
      if (row &lt; 0) {&#13;
        row += totalRows;&#13;
        col += 4 - ((totalRows+4)%8);&#13;
      }&#13;
      if (col &lt; 0) {&#13;
        col += totalCols;&#13;
        row += 4 - ((totalCols+4)%8);&#13;
      }&#13;
      if (assigned[row][col] != 1) {&#13;
        datamatrix[row][col] = bit;&#13;
        assigned[row][col] = 1;&#13;
      }&#13;
    },&#13;
    addFinderPattern: function(datamatrix, rowsRegion, colsRegion, rowsRegionCW, colsRegionCW){ // Add the finder pattern&#13;
      var totalRowsCW = (rowsRegionCW+2) * rowsRegion;&#13;
      var totalColsCW = (colsRegionCW+2) * colsRegion;&#13;
      &#13;
      var datamatrixTemp = new Array();&#13;
      datamatrixTemp[0] = new Array();&#13;
      for (var j=0; j&lt;totalColsCW+2; j++){&#13;
        datamatrixTemp[0][j] = 0;&#13;
      }&#13;
      for (var i=0; i&lt;totalRowsCW; i++){&#13;
        datamatrixTemp[i+1] = new Array();&#13;
        datamatrixTemp[i+1][0] = 0;&#13;
        datamatrixTemp[i+1][totalColsCW+1] = 0;&#13;
        for (var j=0; j&lt;totalColsCW; j++){&#13;
          if (i%(rowsRegionCW+2) == 0){&#13;
            if (j%2 == 0){&#13;
              datamatrixTemp[i+1][j+1] = 1;&#13;
            } else { &#13;
              datamatrixTemp[i+1][j+1] = 0;&#13;
            }&#13;
          } else if (i%(rowsRegionCW+2) == rowsRegionCW+1){ &#13;
            datamatrixTemp[i+1][j+1] = 1;&#13;
          } else if (j%(colsRegionCW+2) == colsRegionCW+1){&#13;
            if (i%2 == 0){&#13;
              datamatrixTemp[i+1][j+1] = 0;&#13;
            } else {&#13;
              datamatrixTemp[i+1][j+1] = 1;&#13;
            }&#13;
          } else if (j%(colsRegionCW+2) == 0){ &#13;
            datamatrixTemp[i+1][j+1] = 1;&#13;
          } else{&#13;
            datamatrixTemp[i+1][j+1] = 0;&#13;
            datamatrixTemp[i+1][j+1] = datamatrix[i-1-(2*(parseInt(i/(rowsRegionCW+2))))][j-1-(2*(parseInt(j/(colsRegionCW+2))))];&#13;
          }&#13;
        }&#13;
      }&#13;
      datamatrixTemp[totalRowsCW+1] = new Array();&#13;
      for (var j=0; j&lt;totalColsCW+2; j++){&#13;
        datamatrixTemp[totalRowsCW+1][j] = 0;&#13;
      }&#13;
      return datamatrixTemp;&#13;
    },&#13;
    getDigit: function(text, rectangular){&#13;
      var dataCodeWords = this.encodeDataCodeWordsASCII(text); // Code the text in the ASCII mode&#13;
      var dataCWCount = dataCodeWords.length;&#13;
      var index = this.selectIndex(dataCWCount, rectangular); // Select the index for the data tables&#13;
      var totalDataCWCount = this.dataCWCount[index]; // Number of data CW&#13;
      var solomonCWCount = this.solomonCWCount[index]; // Number of Reed Solomon CW &#13;
      var totalCWCount = totalDataCWCount + solomonCWCount; // Number of CW      &#13;
      var rowsTotal = this.lengthRows[index]; // Size of symbol&#13;
      var colsTotal = this.lengthCols[index];&#13;
      var rowsRegion = this.regionRows[index]; // Number of region&#13;
      var colsRegion = this.regionCols[index];&#13;
      var rowsRegionCW = this.dataRegionRows[index];&#13;
      var colsRegionCW = this.dataRegionCols[index];&#13;
      var rowsLengthMatrice = rowsTotal-2*rowsRegion; // Size of matrice data&#13;
      var colsLengthMatrice = colsTotal-2*colsRegion;&#13;
      var blocks = this.interleavedBlocks[index];  // Number of Reed Solomon blocks&#13;
      var errorBlocks = (solomonCWCount / blocks);&#13;
      &#13;
      this.addPadCW(dataCodeWords, dataCWCount, totalDataCWCount); // Add codewords pads&#13;
      &#13;
      var g = this.calculSolFactorTable(errorBlocks); // Calculate correction coefficients&#13;
      &#13;
      this.addReedSolomonCW(solomonCWCount, g, totalDataCWCount, dataCodeWords, blocks); // Add Reed Solomon codewords&#13;
      &#13;
      var codeWordsBits = new Array(); // Calculte bits from codewords&#13;
      for (var i=0; i&lt;totalCWCount; i++){&#13;
        codeWordsBits[i] = this.getBits(dataCodeWords[i]);&#13;
      }&#13;
      &#13;
      var datamatrix = new Array(); // Put data in the matrix&#13;
      var assigned = new Array();&#13;
      &#13;
      for (var i=0; i&lt;colsLengthMatrice; i++){&#13;
        datamatrix[i] = new Array();&#13;
        assigned[i] = new Array();&#13;
      }&#13;
      &#13;
      // Add the bottom-right corner if needed&#13;
      if ( ((rowsLengthMatrice * colsLengthMatrice) % 8) == 4) {&#13;
        datamatrix[rowsLengthMatrice-2][colsLengthMatrice-2] = 1;&#13;
        datamatrix[rowsLengthMatrice-1][colsLengthMatrice-1] = 1;&#13;
        datamatrix[rowsLengthMatrice-1][colsLengthMatrice-2] = 0;&#13;
        datamatrix[rowsLengthMatrice-2][colsLengthMatrice-1] = 0;&#13;
        assigned[rowsLengthMatrice-2][colsLengthMatrice-2] = 1;&#13;
        assigned[rowsLengthMatrice-1][colsLengthMatrice-1] = 1;&#13;
        assigned[rowsLengthMatrice-1][colsLengthMatrice-2] = 1;&#13;
        assigned[rowsLengthMatrice-2][colsLengthMatrice-1] = 1;&#13;
      }&#13;
      &#13;
      // Put the codewords into the matrix&#13;
      this.next(0,rowsLengthMatrice,colsLengthMatrice, codeWordsBits, datamatrix, assigned);&#13;
      &#13;
      // Add the finder pattern&#13;
      datamatrix = this.addFinderPattern(datamatrix, rowsRegion, colsRegion, rowsRegionCW, colsRegionCW);&#13;
      &#13;
      return datamatrix;&#13;
    }&#13;
  },&#13;
  // little endian convertor&#13;
  lec:{&#13;
    // convert an int&#13;
    cInt: function(value, byteCount){&#13;
      var le = '';&#13;
      for(var i=0; i&lt;byteCount; i++){&#13;
        le += String.fromCharCode(value &amp; 0xFF);&#13;
        value = value &gt;&gt; 8;&#13;
      }&#13;
      return le;&#13;
    },&#13;
    // return a byte string from rgb values &#13;
    cRgb: function(r,g,b){&#13;
      return String.fromCharCode(b) + String.fromCharCode(g) + String.fromCharCode(r);&#13;
    },&#13;
    // return a byte string from a hex string color&#13;
    cHexColor: function(hex){&#13;
      var v = parseInt('0x' + hex.substr(1));&#13;
      var b = v &amp; 0xFF;&#13;
      v = v &gt;&gt; 8;&#13;
      var g = v &amp; 0xFF;&#13;
      var r = v &gt;&gt; 8;&#13;
      return(this.cRgb(r,g,b));&#13;
    }&#13;
  },&#13;
  hexToRGB: function(hex){&#13;
    var v = parseInt('0x' + hex.substr(1));&#13;
    var b = v &amp; 0xFF;&#13;
    v = v &gt;&gt; 8;&#13;
    var g = v &amp; 0xFF;&#13;
    var r = v &gt;&gt; 8;&#13;
    return({r:r,g:g,b:b});&#13;
  },&#13;
  // test if a string is a hexa string color (like #FF0000)&#13;
  isHexColor: function (value){&#13;
    var r = new RegExp("#[0-91-F]", "gi");&#13;
    return  value.match(r);&#13;
  },&#13;
  // encode data in base64&#13;
  base64Encode: function(value) {&#13;
    var r = '', c1, c2, c3, b1, b2, b3, b4;&#13;
    var k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";&#13;
    var i = 0;&#13;
    while (i &lt; value.length) {&#13;
      c1 = value.charCodeAt(i++);&#13;
      c2 = value.charCodeAt(i++);&#13;
      c3 = value.charCodeAt(i++);&#13;
      b1 = c1 &gt;&gt; 2;&#13;
      b2 = ((c1 &amp; 3) &lt;&lt; 4) | (c2 &gt;&gt; 4);&#13;
      b3 = ((c2 &amp; 15) &lt;&lt; 2) | (c3 &gt;&gt; 6);&#13;
      b4 = c3 &amp; 63;&#13;
      if (isNaN(c2)) b3 = b4 = 64;&#13;
      else if (isNaN(c3)) b4 = 64;&#13;
      r += k.charAt(b1) + k.charAt(b2) + k.charAt(b3) + k.charAt(b4);&#13;
    }&#13;
    return r;&#13;
  },&#13;
  // convert a bit string to an array of array of bit char&#13;
  bitStringTo2DArray: function( digit ){&#13;
    var d = []; d[0] = [];&#13;
    for(var i=0; i&lt;digit.length; i++) d[0][i] = digit.charAt(i);&#13;
    return(d);&#13;
  },&#13;
  // clear JQuery Target&#13;
  resize: function($container, w){&#13;
    $container.style.cssText += 'padding: 0px; overflow: auto; width: ' +  w + 'px';&#13;
    $container.update('');&#13;
    return $container;&#13;
  },&#13;
  // bmp barcode renderer&#13;
  digitToBmpRenderer: function($container, settings, digit, hri, mw, mh){&#13;
    var lines = digit.length;&#13;
    var columns = digit[0].length;&#13;
    var i = 0;&#13;
    var c0 = this.isHexColor(settings.bgColor) ? this.lec.cHexColor(settings.bgColor) : this.lec.cRgb(255,255,255);&#13;
    var c1 = this.isHexColor(settings.color) ? this.lec.cHexColor(settings.color) : this.lec.cRgb(0,0,0);&#13;
    var bar0 = '';&#13;
    var bar1 = '';&#13;
      &#13;
    // create one bar 0 and 1 of "mw" byte length &#13;
    for(i=0; i&lt;mw; i++){&#13;
      bar0 += c0;&#13;
      bar1 += c1;&#13;
    }&#13;
    var bars = '';&#13;
  &#13;
    var padding = (4 - ((mw * columns * 3) % 4)) % 4; // Padding for 4 byte alignment ("* 3" come from "3 byte to color R, G and B")&#13;
    var dataLen = (mw * columns + padding) * mh * lines;&#13;
  &#13;
    var pad = '';&#13;
    for(i=0; i&lt;padding; i++) pad += '\0';&#13;
    &#13;
    // Bitmap header&#13;
    var bmp = 'BM' +                            // Magic Number&#13;
              this.lec.cInt(54 + dataLen, 4) +  // Size of Bitmap size (header size + data len)&#13;
              '\0\0\0\0' +                      // Unused&#13;
              this.lec.cInt(54, 4) +            // The offset where the bitmap data (pixels) can be found&#13;
              this.lec.cInt(40, 4) +            // The number of bytes in the header (from this point).&#13;
              this.lec.cInt(mw * columns, 4) +  // width&#13;
              this.lec.cInt(mh * lines, 4) +    // height&#13;
              this.lec.cInt(1, 2) +             // Number of color planes being used&#13;
              this.lec.cInt(24, 2) +            // The number of bits/pixel&#13;
              '\0\0\0\0' +                      // BI_RGB, No compression used&#13;
              this.lec.cInt(dataLen, 4) +       // The size of the raw BMP data (after this header)&#13;
              this.lec.cInt(2835, 4) +          // The horizontal resolution of the image (pixels/meter)&#13;
              this.lec.cInt(2835, 4) +          // The vertical resolution of the image (pixels/meter)&#13;
              this.lec.cInt(0, 4) +             // Number of colors in the palette&#13;
              this.lec.cInt(0, 4);              // Means all colors are important&#13;
    // Bitmap Data&#13;
    for(var y=lines-1; y&gt;=0; y--){&#13;
      var line = '';&#13;
      for (var x=0; x&lt;columns; x++){&#13;
        line += digit[y][x] == '0' ? bar0 : bar1;&#13;
      }&#13;
      line += pad;&#13;
      for(var k=0; k&lt;mh; k++){&#13;
        bmp += line;&#13;
      }&#13;
    }&#13;
    // set bmp image to the container&#13;
    var object = document.createElement('object');&#13;
    object.setAttribute('type', 'image/bmp');&#13;
    object.setAttribute('data', 'data:image/bmp;base64,'+ this.base64Encode(bmp));&#13;
    this.resize($container, mw * columns + padding).update(object);&#13;
                    &#13;
  },&#13;
  // bmp 1D barcode renderer&#13;
  digitToBmp: function($container, settings, digit, hri){&#13;
    var w = Barcode.intval(settings.barWidth);&#13;
    var h = Barcode.intval(settings.barHeight);&#13;
    this.digitToBmpRenderer($container, settings, this.bitStringTo2DArray(digit), hri, w, h);&#13;
  },&#13;
  // bmp 2D barcode renderer&#13;
  digitToBmp2D: function($container, settings, digit, hri){&#13;
    var s = Barcode.intval(settings.moduleSize);&#13;
    this.digitToBmpRenderer($container, settings, digit, hri, s, s);&#13;
  },&#13;
  // css barcode renderer&#13;
  digitToCssRenderer : function($container, settings, digit, hri, mw, mh){&#13;
    var lines = digit.length;&#13;
    var columns = digit[0].length;&#13;
    var content = "";&#13;
    var bar0 = "&lt;div style=\"float: left; font-size: 0px; background-color: " + settings.bgColor + "; height: " + mh + "px; width: &amp;Wpx\"&gt;&lt;/div&gt;";    &#13;
    var bar1 = "&lt;div style=\"float: left; font-size: 0px; width:0; border-left: &amp;Wpx solid " + settings.color + "; height: " + mh + "px;\"&gt;&lt;/div&gt;";&#13;
&#13;
    var len, current;&#13;
    for(var y=0; y&lt;lines; y++){&#13;
      len = 0;&#13;
      current = digit[y][0];&#13;
      for (var x=0; x&lt;columns; x++){&#13;
        if ( current == digit[y][x] ) {&#13;
          len++;&#13;
        } else {&#13;
          content += (current == '0' ? bar0 : bar1).replace("&amp;W", len * mw);&#13;
          current = digit[y][x];&#13;
          len=1;&#13;
        }&#13;
      }&#13;
      if (len &gt; 0){&#13;
        content += (current == '0' ? bar0 : bar1).replace("&amp;W", len * mw);&#13;
      }&#13;
    }  &#13;
    if (settings.showHRI){&#13;
      content += "&lt;div style=\"clear:both; width: 100%; background-color: " + settings.bgColor + "; color: " + settings.color + "; text-align: center; font-size: " + settings.fontSize + "px; margin-top: " + settings.marginHRI + "px;\"&gt;"+hri+"&lt;/div&gt;";&#13;
    }&#13;
    this.resize($container, mw * columns).update(content);&#13;
  },&#13;
  // css 1D barcode renderer  &#13;
  digitToCss: function($container, settings, digit, hri){&#13;
    var w = Barcode.intval(settings.barWidth);&#13;
    var h = Barcode.intval(settings.barHeight);&#13;
    this.digitToCssRenderer($container, settings, this.bitStringTo2DArray(digit), hri, w, h);&#13;
  },&#13;
  // css 2D barcode renderer&#13;
  digitToCss2D: function($container, settings, digit, hri){&#13;
    var s = Barcode.intval(settings.moduleSize);&#13;
    this.digitToCssRenderer($container, settings, digit, hri, s, s);&#13;
  },&#13;
  // svg barcode renderer&#13;
  digitToSvgRenderer: function($container, settings, digit, hri, mw, mh){&#13;
    var lines = digit.length;&#13;
    var columns = digit[0].length;&#13;
    &#13;
    var width = mw * columns;&#13;
    var height = mh * lines;&#13;
    if (settings.showHRI){&#13;
      var fontSize = Barcode.intval(settings.fontSize);&#13;
      height += Barcode.intval(settings.marginHRI) + fontSize;&#13;
    }&#13;
    &#13;
    // svg header&#13;
    var svg = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="' + width + '" height="' + height + '"&gt;';&#13;
    &#13;
    // background&#13;
    svg += '&lt;rect width="' +  width + '" height="' + height + '" x="0" y="0" fill="' + settings.bgColor + '" /&gt;';&#13;
    &#13;
    var bar1 = '&lt;rect width="&amp;W" height="' + mh + '" x="&amp;X" y="&amp;Y" fill="' + settings.color + '" /&gt;';&#13;
    &#13;
    var len, current;&#13;
    for(var y=0; y&lt;lines; y++){&#13;
      len = 0;&#13;
      current = digit[y][0];&#13;
      for (var x=0; x&lt;columns; x++){&#13;
        if ( current == digit[y][x] ) {&#13;
          len++;&#13;
        } else {&#13;
          if (current == '1') {&#13;
            svg += bar1.replace("&amp;W", len * mw).replace("&amp;X", (x - len) * mw).replace("&amp;Y", y * mh);&#13;
          }&#13;
          current = digit[y][x];&#13;
          len=1;&#13;
        }&#13;
      }&#13;
      if ( (len &gt; 0) &amp;&amp; (current == '1') ){&#13;
        svg += bar1.replace("&amp;W", len * mw).replace("&amp;X", (columns - len) * mw).replace("&amp;Y", y * mh);&#13;
      }&#13;
    }&#13;
    &#13;
    if (settings.showHRI){&#13;
      svg += '&lt;g transform="translate(' + Math.floor(width/2) + ' 0)"&gt;';&#13;
      svg += '&lt;text y="' + (height - Math.floor(fontSize/2)) + '" text-anchor="middle" style="font-family: Arial; font-size: ' + fontSize + 'px;" fill="' + settings.color + '"&gt;' + hri + '&lt;/text&gt;';&#13;
      svg += '&lt;/g&gt;';&#13;
    }&#13;
    // svg footer&#13;
    svg += '&lt;/svg&gt;';&#13;
    &#13;
    // create a dom object, flush container and add object to the container&#13;
    var object = document.createElement('object');&#13;
    object.setAttribute('type', 'image/svg+xml');&#13;
    object.setAttribute('data', 'data:image/svg+xml,'+ svg);&#13;
    this.resize($container, width).update(object);&#13;
  },&#13;
  // svg 1D barcode renderer&#13;
  digitToSvg: function($container, settings, digit, hri){&#13;
    var w = Barcode.intval(settings.barWidth);&#13;
    var h = Barcode.intval(settings.barHeight);&#13;
    this.digitToSvgRenderer($container, settings, this.bitStringTo2DArray(digit), hri, w, h);&#13;
  },&#13;
  // svg 2D barcode renderer&#13;
  digitToSvg2D: function($container, settings, digit, hri){&#13;
    var s = Barcode.intval(settings.moduleSize);&#13;
    this.digitToSvgRenderer($container, settings, digit, hri, s, s);&#13;
  },&#13;
  &#13;
  // canvas barcode renderer&#13;
  digitToCanvasRenderer : function($container, settings, digit, hri, xi, yi, mw, mh){&#13;
    var canvas = $container;&#13;
    if ( !canvas || !canvas.getContext ) return; // not compatible&#13;
    &#13;
    var lines = digit.length;&#13;
    var columns = digit[0].length;&#13;
    &#13;
    var ctx = canvas.getContext('2d');&#13;
    ctx.lineWidth = 1;&#13;
    ctx.lineCap = 'butt';&#13;
    ctx.fillStyle = settings.bgColor;&#13;
    ctx.fillRect (xi, yi, columns * mw, lines * mh);&#13;
    &#13;
    ctx.fillStyle = settings.color;&#13;
    &#13;
    for(var y=0; y&lt;lines; y++){&#13;
      var len = 0;&#13;
      var current = digit[y][0];&#13;
      for(var x=0; x&lt;columns; x++){&#13;
        if (current == digit[y][x]) {&#13;
          len++;&#13;
        } else {&#13;
          if (current == '1'){&#13;
            ctx.fillRect (xi + (x - len) * mw, yi + y * mh, mw * len, mh);&#13;
          }&#13;
          current = digit[y][x];&#13;
          len=1;&#13;
        }&#13;
      }&#13;
      if ( (len &gt; 0) &amp;&amp; (current == '1') ){&#13;
        ctx.fillRect (xi + (columns - len) * mw, yi + y * mh, mw * len, mh);&#13;
      }&#13;
    }&#13;
    if (settings.showHRI){&#13;
      var dim = ctx.measureText(hri);&#13;
      ctx.fillText(hri, xi + Math.floor((columns * mw - dim.width)/2), yi + lines * mh + settings.fontSize + settings.marginHRI);&#13;
    }&#13;
  },&#13;
  // canvas 1D barcode renderer&#13;
  digitToCanvas: function($container, settings, digit, hri){&#13;
    var w  = Barcode.intval(settings.barWidth);&#13;
    var h = Barcode.intval(settings.barHeight);&#13;
    var x = Barcode.intval(settings.posX);&#13;
    var y = Barcode.intval(settings.posY);&#13;
    this.digitToCanvasRenderer($container, settings, this.bitStringTo2DArray(digit), hri, x, y, w, h);&#13;
  },&#13;
  // canvas 2D barcode renderer&#13;
  digitToCanvas2D: function($container, settings, digit, hri){&#13;
    var s = Barcode.intval(settings.moduleSize);&#13;
    var x = Barcode.intval(settings.posX);&#13;
    var y = Barcode.intval(settings.posY);&#13;
    this.digitToCanvasRenderer($container, settings, digit, hri, x, y, s, s);&#13;
  }&#13;
};&#13;
&#13;
&#13;
var barcodeMethod = {&#13;
  barcode: function(element, datas, type, settings) {&#13;
    var $this = $(element);&#13;
    var digit = "",&#13;
        hri   = "",&#13;
        code  = "",&#13;
        crc   = true,&#13;
        rect  = false,&#13;
        b2d   = false;&#13;
    &#13;
    if (typeof(datas) == "string"){&#13;
      code = datas;&#13;
    } else if (typeof(datas) == "object"){&#13;
      code = typeof(datas.code) == "string" ? datas.code : "";&#13;
      crc = typeof(datas.crc) != "undefined" ? datas.crc : true;&#13;
      rect = typeof(datas.rect) != "undefined" ? datas.rect : false;&#13;
    }&#13;
    if (code == "") return(false);&#13;
    &#13;
    if (typeof(settings) == "undefined") settings = [];&#13;
    for(var name in Barcode.settings){&#13;
      if (settings[name] == undefined) settings[name] = Barcode.settings[name];&#13;
    }&#13;
    &#13;
    switch(type){&#13;
      case "std25":&#13;
      case "int25":&#13;
        digit = Barcode.i25.getDigit(code, crc, type);&#13;
        hri = Barcode.i25.compute(code, crc, type);&#13;
      break;&#13;
      case "ean8":&#13;
      case "ean13":&#13;
        digit = Barcode.ean.getDigit(code, type);&#13;
        hri = Barcode.ean.compute(code, type);&#13;
      break;&#13;
      case "upc":&#13;
        digit = Barcode.upc.getDigit(code);&#13;
        hri = Barcode.upc.compute(code);&#13;
      break;&#13;
      case "code11":&#13;
        digit = Barcode.code11.getDigit(code);&#13;
        hri = code;&#13;
      break;&#13;
      case "code39":&#13;
        digit = Barcode.code39.getDigit(code);&#13;
        hri = code;&#13;
      break;&#13;
      case "code93":&#13;
        digit = Barcode.code93.getDigit(code, crc);&#13;
        hri = code;&#13;
      break;&#13;
      case "code128":&#13;
        digit = Barcode.code128.getDigit(code);&#13;
        hri = code;&#13;
      break;&#13;
      case "codabar":&#13;
        digit = Barcode.codabar.getDigit(code);&#13;
        hri = code;&#13;
      break;&#13;
      case "msi":&#13;
        digit = Barcode.msi.getDigit(code, crc);&#13;
        hri = Barcode.msi.compute(code, crc);&#13;
      break;&#13;
      case "datamatrix":   &#13;
        digit = Barcode.datamatrix.getDigit(code, rect);&#13;
        hri = code;&#13;
        b2d = true;&#13;
      break; &#13;
    }&#13;
    if (digit.length == 0) return($this);&#13;
    &#13;
    // Quiet Zone&#13;
    if ( !b2d &amp;&amp; settings.addQuietZone) digit = "0000000000" + digit + "0000000000";&#13;
    &#13;
    var fname = 'digitTo' + settings.output.charAt(0).toUpperCase() + settings.output.substr(1) + (b2d ? '2D' : '');&#13;
    if (typeof(Barcode[fname]) == 'function') {&#13;
      Barcode[fname]($this, settings, digit, hri);&#13;
    }&#13;
    &#13;
    return($this);&#13;
  }&#13;
};&#13;
&#13;
Element.addMethods('DIV', barcodeMethod);&#13;
Element.addMethods('CANVAS', barcodeMethod);&#13;
</script><sys_created_by>admin</sys_created_by><sys_created_on>2013-03-20 16:02:15</sys_created_on><sys_id>e25ae52057100100824e3ea2fa99fdc8</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2013-03-20 16:02:15</sys_updated_on></sys_ui_script></record_update>]]></payload>
<remote_update_set display_value="Barcode Generator">74ecc3d9acedc900064bc482ee4d08f8</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2013-05-24 10:26:22</sys_created_on>
<sys_id>bcecc3d9acedc900064bc482ee4d08f9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2013-05-24 10:26:22</sys_updated_on>
<table/>
<target_name>prototype-barcode</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value=""/>
<category/>
<comments/>
<name>sys_ui_page_942aa52057100100824e3ea2fa99fde0</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page"><sys_ui_page action="INSERT_OR_UPDATE"><category>general</category><client_script>addLoadEvent( function() {&#13;
   &#13;
   $("bcTarget").barcode($('mydata').value, "datamatrix", {"moduleSize":10});&#13;
   &#13;
   &#13;
	  var width = $('bcTarget').getStyle('width');&#13;
   var dlg = GlideDialogWindow.get();&#13;
   dlg.setWidth(width);&#13;
   &#13;
   dlg._centerOnScreen();&#13;
   &#13;
});&#13;
&#13;
function printDiv(divID) {&#13;
   &#13;
   var width = parseInt($('bcTarget').getStyle('width')) + 20;&#13;
   var height = GlideDialogWindow.get().getHeight();&#13;
   var divElements = document.getElementById(divID).innerHTML;&#13;
   var top = (screen.height/2) - (height/2);&#13;
   var left = (screen.width/2) - (width/2);&#13;
var win = window.open('', 'print_content', 'width=' + width + ', height=' + height + ', top=' + top + ' ,left=' + left );&#13;
   win.document.open();&#13;
   win.document.write('&lt;html&gt;&lt;body onLoad="window.print()"&gt;' + divElements + ' &lt;/body&gt;&lt;/html&gt;');&#13;
 win.document.close();&#13;
 win.close();&#13;
   setTimeout( function() { win.close(); }, 3000);&#13;
}</client_script><description/><html>&lt;?xml version="1.0" encoding="utf-8" ?&gt;&#13;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;&#13;
&lt;g:include_script src="prototype-barcode.jsdbx"/&gt; &#13;
&lt;input type="hidden" id="mydata" value="$[sysparm_data]"/&gt; &#13;
&lt;table&gt;&#13;
&lt;tr&gt;&#13;
&lt;td colspan="2" &gt;&#13;
&lt;div id="container"&gt;&#13;
&lt;div id="bcTarget" name="bcTarget"&gt;&lt;/div&gt;   &#13;
&lt;/div&gt;&#13;
&lt;/td&gt;&#13;
&lt;/tr&gt;&#13;
&lt;tr&gt;&#13;
&lt;td align="left"&gt;&#13;
&lt;input type="button" onclick="printDiv('container');" value="Print Label"/&gt;&#13;
&lt;/td&gt;&#13;
&lt;td align="right"&gt;&#13;
&lt;input type="button" onclick="GlideDialogWindow.get().destroy();" value="Close Window"/&gt;&#13;
&lt;/td&gt;&#13;
&lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
&lt;/j:jelly&gt;</html><name>barcode_gen</name><processing_script/><sys_created_by>admin</sys_created_by><sys_created_on>2013-03-20 16:01:23</sys_created_on><sys_id>942aa52057100100824e3ea2fa99fde0</sys_id><sys_mod_count>59</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2013-03-20 19:33:34</sys_updated_on></sys_ui_page></record_update>]]></payload>
<remote_update_set display_value="Barcode Generator">74ecc3d9acedc900064bc482ee4d08f8</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2013-05-24 10:26:22</sys_created_on>
<sys_id>f8ecc3d9acedc900064bc482ee4d08f9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2013-05-24 10:26:22</sys_updated_on>
<table/>
<target_name>barcode_gen</target_name>
<type>UI Page</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value=""/>
<category/>
<comments/>
<name>sys_ui_action_ee9a692057100100824e3ea2fa99fd1b</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action"><sys_ui_action action="INSERT_OR_UPDATE"><action_name/><active>true</active><client>true</client><comments/><condition/><form_action>true</form_action><form_button>true</form_button><form_context_menu>false</form_context_menu><form_link>false</form_link><hint/><list_action>false</list_action><list_banner_button>false</list_banner_button><list_button>false</list_button><list_choice>false</list_choice><list_context_menu>false</list_context_menu><list_link>false</list_link><list_save_with_form_button>false</list_save_with_form_button><name>Show Barcode</name><onclick>generateBar();</onclick><order>100</order><script>   function generateBar() {&#13;
   var w = new GlideDialogWindow('barcode_gen');&#13;
   w.setTitle('Barcode Information');&#13;
   w.setPreference('sysparm_data', g_form.getValue('number'));&#13;
   w.render();&#13;
}</script><show_insert>true</show_insert><show_multiple_update>false</show_multiple_update><show_query>false</show_query><show_update>true</show_update><sys_created_by>admin</sys_created_by><sys_created_on>2013-03-20 16:04:06</sys_created_on><sys_domain>global</sys_domain><sys_id>ee9a692057100100824e3ea2fa99fd1b</sys_id><sys_mod_count>3</sys_mod_count><sys_overrides/><sys_updated_by>admin</sys_updated_by><sys_updated_on>2013-03-20 19:22:24</sys_updated_on><table>task</table></sys_ui_action></record_update>]]></payload>
<remote_update_set display_value="Barcode Generator">74ecc3d9acedc900064bc482ee4d08f8</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2013-05-24 10:26:22</sys_created_on>
<sys_id>fcecc3d9acedc900064bc482ee4d08f8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2013-05-24 10:26:22</sys_updated_on>
<table>task</table>
<target_name>Show Barcode</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
